<?php
// $Id: 
/**
 * @file
 * Add client side validation to a webform.
 */

/**
 * Implementation of hook_form_alter().
 */

function clientside_validation_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form') !== FALSE) {
    $form['#after_build'][] = 'clientside_validation_webform_after_build';
  } 
  else {
    switch ($form['#id']) {
      case 'node-form':
      case 'webform-component-edit-form':
        $form['#after_build'][] = 'clientside_validation_form_after_build';
        break;
      default:
        // dpm($form['#id']);
      
    }
  }
}

/**
 * Webform
 */
 
function clientside_validation_webform_after_build(&$form, &$form_state) {
  $js_rules = array();
  clientside_validation_webform_after_build_recurse($form['#id'], &$form, &$form_state, &$js_rules);
  
  if (!empty($js_rules)) {
    $inline_js = '';
    $inline_js .= 'if (!$(\'div.messages.error\').length) {$(\'<div id="formerrors-' . $form['#id'] . '" class="messages error webform-clientside-error"><ul></ul></div>\').insertBefore(\'#' . $form['#id'] . '\').hide();}';
    $inline_js .= '$("#' . $form['#id'] . '").validate({
      errorClass: "error",
      errorContainer: "#formerrors-' . $form['#id'] . '",
      errorLabelContainer: "#formerrors-' . $form['#id'] . ' ul",
      wrapper: "li"
    }); ' . "\n";
    foreach($js_rules as $key => $rule) {
      $inline_js .= '$("#' . $form['#id'] . ' :input[name=\'' . $key . '\']").rules("add", ';
 
      // $rule can contain js functions, but they are converted to a string :/
      $converted_rules = clientside_validation_drupal_json_encode((object)$rule);
      $converted_rules = preg_replace ('/:"jQuery.validator.format([^"]*)"/i', ':jQuery.validator.format${1}', $converted_rules);
      $inline_js .= $converted_rules;
      $inline_js .= ');' . "\n";
    }
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/jquery-validate/jquery.validate.js', 'module');
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/clientside_validation.js', 'module');
    $inline_js = '$(document).ready(function() {' . "\n" . $inline_js . "\n" . '});';
    drupal_add_js ($inline_js, 'inline', 'footer');
    
    global $user;
    if ($user->uid == 1) {
      // dpm($js_rules);
    }
    
  }
  
  return $form;
}

function clientside_validation_webform_after_build_recurse($form_id, &$form, &$form_state, &$js_rules) {
  if ($children = array_values(element_children($form))) {
    foreach ($children as $index => $item) {
      $element = &$form[$item];
      if (isset($element['#title'])) {
        if ($element['#required']) {
          if (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'time' && isset($element['hour']['#name'])) {
            $js_rules[$element['hour']['#name']]['required'] = TRUE;
            $js_rules[$element['hour']['#name']]['messages']['required'] = t('Hour in !name field is required.', array('!name' => $element['#title']));
            $js_rules[$element['minute']['#name']]['required'] = TRUE;
            $js_rules[$element['minute']['#name']]['messages']['required'] = t('Minute in !name field is required.', array('!name' => $element['#title']));
          }
          else if (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'date') {
            $js_rules[$element['#name'] . '[month]']['required'] = TRUE;
            $js_rules[$element['#name'] . '[month]']['messages']['required'] = t('Month in !name field is required.', array('!name' => $element['#title']));
            $js_rules[$element['#name'] . '[day]']['required'] = TRUE;
            $js_rules[$element['#name'] . '[day]']['messages']['required'] = t('Day in !name field is required.', array('!name' => $element['#title']));
            $js_rules[$element['#name'] . '[year]']['required'] = TRUE;
            $js_rules[$element['#name'] . '[year]']['messages']['required'] = t('Year in !name field is required.', array('!name' => $element['#title']));
            if (is_numeric($element['#year_start']) && is_numeric($element['#year_end'])) {
              $js_rules[$element['#name'] . '[year]']['range'] = array($element['#year_start'], $element['#year_end']);
              $js_rules[$element['#name'] . '[year]']['messages']['range'] = t('The entered date needs to be between the years @start and @end.', array('@start' => $element['#year_start'], '@end' => $element['#year_end']));
            }            
          }
          else if ($element['#type'] == 'checkboxes') {
            $count = 0;
            foreach ($element['#options'] as $key => $value) {
              $js_rules[$element[$key]['#name']]['checkboxgroupminmax'] = array(1, 99, '#webform-component-' . end($element['#parents']));
              if ($count++ == 0) {
                $js_rules[$element[$key]['#name']]['messages']['checkboxgroupminmax'] = t('!name field is required.', array('!name' => $element['#title']));
              }
              else {
                $js_rules[$element[$key]['#name']]['messages']['checkboxgroupminmax'] = false;
              }
            }
          }
          else if ($element['#type'] == 'select' && $element['#multiple']) {
            $js_rules[$element['#name'] . '[]']['required'] = TRUE;
            $js_rules[$element['#name'] . '[]']['messages']['required'] = t('!name field is required.', array('!name' => $element['#title']));
          }
          else if (isset($element['#type'])) {
            $js_rules[$element['#name']]['required'] = TRUE;
            $js_rules[$element['#name']]['messages']['required'] = t('!name field is required.', array('!name' => $element['#title']));
          }
        }
        if (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'file' && $element['#webform_component']['mandatory'] == "1") {
          $js_rules[$element['#name']]['required'] = TRUE;
          $js_rules[$element['#name']]['messages']['required'] = t('!name field is required.', array('!name' => $element['#title']));
          if (isset($element['#webform_component']['extra']['filtering']['types'])) {
            $extensions = $element['#webform_component']['extra']['filtering']['types'];
            $extension_list = preg_replace('#,(?![^,]+,)#', ' or', implode(', ', $extensions));
            $js_rules[$element['#name']]['accept'] = implode('|', $extensions);
            $js_rules[$element['#name']]['messages']['accept'] = t("Only files with a %exts extension are allowed.", array('%exts' => $extension_list));
          }
        }
        if ($element['#maxlength']) {
          $js_rules[$element['#name']]['maxlength'] = $element['#maxlength'];
          $js_rules[$element['#name']]['messages']['maxlength'] = t('!name field has a max length of !maxl characters.', array('!name' => $element['#title'], '!maxl' => $element['#maxlength']));
        }
        if (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'email') {
          $js_rules[$element['#name']]['email'] = TRUE;
          $js_rules[$element['#name']]['messages']['email'] = t('The value in !name is not a valid email address.', array('!name' => $element['#title']));
        }

//          $js_rules[$element['#name']]['messages']['email'] = 'jQuery.validator.format(\'' . t('!value is not a valid email address.', array('!value' => '{0}')) . '\')';

      }
     
      clientside_validation_webform_after_build_recurse($form_id, $element, $form_state, $js_rules);
    }
  }
}

/**
 * Regular form
 */
 
function clientside_validation_form_after_build(&$form, &$form_state) {
  $js_rules = array();
  clientside_validation_form_after_build_recurse($form['#id'], &$form, &$form_state, &$js_rules);
  
  if (!empty($js_rules)) {
    $inline_js = '';
    $inline_js .= 'if (!$(\'div.messages.error\').length) {$(\'<div id="formerrors-' . $form['#id'] . '" class="messages error webform-clientside-error"><ul></ul></div>\').insertBefore(\'#' . $form['#id'] . '\').hide();}';
    $inline_js .= '$("#' . $form['#id'] . '").validate({
      errorClass: "error",
      errorContainer: "#formerrors-' . $form['#id'] . '",
      errorLabelContainer: "#formerrors-' . $form['#id'] . ' ul",
      wrapper: "li"
    }); ' . "\n";
    foreach($js_rules as $key => $rule) {
      $inline_js .= '$("#' . $form['#id'] . ' :input[name=\'' . $key . '\']").rules("add", ';
 
      // $rule can contain js functions, but they are converted to a string :/
      $converted_rules = clientside_validation_drupal_json_encode((object)$rule);
      $converted_rules = preg_replace ('/:"jQuery.validator.format([^"]*)"/i', ':jQuery.validator.format${1}', $converted_rules);
      $inline_js .= $converted_rules;
      $inline_js .= ');' . "\n";
    }
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/jquery-validate/jquery.validate.js', 'module');
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/clientside_validation.js', 'module');
    $inline_js = '$(document).ready(function() {' . "\n" . $inline_js . "\n" . '});';
    drupal_add_js ($inline_js, 'inline', 'footer');
    
    global $user;
    if ($user->uid == 1) {
      //dpm($js_rules);
    }
    
  }
  
  return $form;
}

function clientside_validation_form_after_build_recurse($form_id, &$form, &$form_state, &$js_rules) {
  if ($children = array_values(element_children($form))) {
    foreach ($children as $index => $item) {
      $element = &$form[$item];
      if ((isset($element['#title']) && isset($element['#type']) && isset($element['#field_name'])) || (isset($element['#type']) && isset($form_state['#field_info'][$element['#parents'][0]]))) {
        clientside_validation_cck ($form_id, $element, &$js_rules);
      }
      clientside_validation_form_after_build_recurse($form_id, $element, $form_state, $js_rules);
    }
  }
}

function clientside_validation_cck ($form_id, $element, &$js_rules) {
  static $multiples = array();
  if (isset($element['#name']) && !isset($js_rules[$element['#name']])) {
    if (!isset($element['#field_name'])) {
      $element['#field_name'] = $element['#parents'][0]; // Is this a good idea???
    }
    $cckfield = content_fields($element['#field_name']);
    $el_name = $element['#name'];
    $is_multiple = $cckfield['multiple'];
    switch ($cckfield['type']) {
      case 'number_decimal':
        switch ($element['#type']) {
          case 'textfield':
            _clientside_validation_set_number ($el_name, $cckfield['widget']['label'], $cckfield['decimal'], $js_rules);
            _clientside_validation_set_required ($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            _clientside_validation_set_minmax($el_name, $cckfield['widget']['label'], $cckfield['min'], $cckfield['max'], $js_rules);
            break;
          case 'select':
            if ($is_multiple) {
              $el_name .= '[]';
              _clientside_validation_set_minmaxlength ($el_name, $element['#title'], '', $is_multiple, $js_rules);
            }
            _clientside_validation_set_required ($el_name, $element['#title'], $cckfield['required'], $js_rules);
            _clientside_validation_set_minmax($el_name, $element['#title'], $cckfield['min'], $cckfield['max'], $js_rules);
            break;
          case 'radio':
            _clientside_validation_set_required ($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            break;
          case 'checkbox':
            if ($is_multiple) {
              // We don't have a parent element to connect to, so no go, outer div has only a class
              // The checkboxes element has the unique name, but this isn't added to the outer div
              /*
                $js_rules[$el_name]['checkboxgroupminmax'] = array(0, $is_multiple, '#webform-component-' . end($element['#parents']));
                if (!isset($multiples[$form_id][$element['#field_name']])) {
                  $js_rules[$el_name]['messages']['checkboxgroupminmax'] = t('!name field has to have maximum !max values.', array('!name' => $cckfield['widget']['label'], '!max' => $is_multiple));
                  $multiples[$form_id][$element['#field_name']] = 1;
                }
                else {
                  $js_rules[$el_name]['messages']['checkboxgroupminmax'] = FALSE;
                }
              */
            }
            else {
              _clientside_validation_set_required ($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            }
            break;
          default:
            // dpm($element);
            // dpm($cckfield);
            break;
        }
        break;
      default:
        // dpm($element);
        // dpm($cckfield);
        break;
    }
  }
}

function _clientside_validation_set_required ($name, $title, $required, &$js_rules) {
  if ($required) {
    $js_rules[$name]['required'] = TRUE;
    $js_rules[$name]['messages']['required'] = t('!name field is required.', array('!name' => $title));
  }
}

function _clientside_validation_set_number ($name, $title, $decimalpoint, &$js_rules) {
  if ($decimalpoint == '.') {
    $js_rules[$name]['number'] = TRUE;
    $js_rules[$name]['messages']['number'] = t('!name field accepts only numbers (use a \'.\' as decimal point).', array('!name' => $title));
  }
  else {
    $js_rules[$name]['numberDE'] = TRUE;
    $js_rules[$name]['messages']['numberDE'] = t('!name field accepts only numbers (use a \',\' as decimal point).', array('!name' => $title));
  }
}

function _clientside_validation_set_minmax ($name, $title, $min, $max, &$js_rules) {
  if (isset($min) && $min != '' && isset($max) && $max != '') {
    $js_rules[$name]['range'] = array($min, $max);
    $js_rules[$name]['messages']['range'] = t('!name field has to be between !min and !max.', array('!name' => $title, '!min' => $min, '!max' => $max));
  }
  else if (isset($min) && $min != '') {
    $js_rules[$name]['min'] = $min;
    $js_rules[$name]['messages']['min'] = t('!name field has to be greater than !min.', array('!name' => $title, '!min' => $min));
  }
  else if (isset($max) && $max != '') {
    $js_rules[$name]['max'] = $max;
    $js_rules[$name]['messages']['max'] = t('!name field has to be smaller than !max.', array('!name' => $title, '!max' => $max));
  }
}

function _clientside_validation_set_minmaxlength ($name, $title, $min, $max, &$js_rules) {
  if (isset($min) && $min != '' && isset($max) && $max != '') {
    $js_rules[$name]['rangelength'] = array($min, $max);
    $js_rules[$name]['messages']['rangelength'] = t('!name field has to have between !min and !max values.', array('!name' => $title, '!min' => $min, '!max' => $max));
  }
  else if (isset($min) && $min != '') {
    $js_rules[$name]['minlength'] = $min;
    $js_rules[$name]['messages']['minlength'] = t('!name field has to have minimal !min values.', array('!name' => $title, '!min' => $min));
  }
  else if (isset($max) && $max != '') {
    $js_rules[$name]['maxlength'] = $max;
    $js_rules[$name]['messages']['maxlength'] = t('!name field has to have maximum !max values.', array('!name' => $title, '!max' => $max));
  }
}

function clientside_validation_drupal_json_encode($var) {
  return str_replace(array('<', '>', '&'), array('\u003c', '\u003e', '\u0026'), json_encode($var));
}

