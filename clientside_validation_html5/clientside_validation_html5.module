<?php

// $Id$
/**
 * @file
 * Add clientside validation support for html5 elements
 */

function clientside_validation_html5_clientside_validation_form_alter(&$form, &$form_state, &$js_rules) {
  static $js_added = FALSE;
  if (!$js_added) {
    drupal_add_js(drupal_get_path('module', 'clientside_validation_html5') . '/clientside_validation_html5.js', array('scope' => 'footer'));
    $js_added = TRUE;
  }
  clientside_validation_html5_after_build_recurse($form['#id'], $form, $form_state, $js_rules);
}

function clientside_validation_html5_after_build_recurse($form_id, &$form, &$form_state, &$js_rules) {
  if ($children = array_values(element_children($form))) {
    foreach ($children as $index => $item) {
      $element = &$form[$item];
      $types = array(
        'number',
      );
      if (isset($element['#type']) && in_array($element['#type'], $types)) {
        clientside_validation_html5($form_id, $element, $js_rules);
      }
      clientside_validation_html5_after_build_recurse($form_id, $element, $form_state, $js_rules);
    }
  }
}

function clientside_validation_html5($form_id, $element, &$js_rules) {
  static $multiples = array();
  if (isset($element['#name'])) {
    $el_name = $element['#name'];
    $el_title = $el_name;
    if (isset($element['#title'])) {
      $el_title = $element['#title'];
    }
    $is_multiple = FALSE;
    if (isset($element['#multiple'])) {
      $is_multiple = $element['#multiple'];
    }
    $required_error = isset($element['#required_error']) ? $element['#required_error'] : '';
    switch ($element['#type']) {
      case 'number':
        _clientside_validation_set_required($el_name, $el_title, $element["#required"], $js_rules, $required_error);
        $min = isset($element['#min']) ? $element['#min'] : '';
        $max = isset($element['#max']) ? $element['#max'] : '';
        if(!empty($min) || !empty($max)) {
          _clientside_validation_set_minmax($el_name, $el_title, $min, $max, $js_rules);
        }
        break;
    }
  }
}
